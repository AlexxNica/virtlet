defaults: &defaults
  docker:
    - image: ubuntu:xenial
  working_directory: ~/virtlet
  environment:
    DOCKER_VERSION: "17.03.0-ce"

setup_env: &setup_env
  name: Set up the environment
  command: |
    apt-get -qq update
    apt-get install -y curl ca-certificates openssh-client rsync socat wget

    # Install Docker client
    curl -sSL -o "/tmp/docker-${DOCKER_VERSION}.tgz" "https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION}.tgz"
    tar -xz -C /tmp -f "/tmp/docker-${DOCKER_VERSION}.tgz"
    mv /tmp/docker/* /usr/bin

    # Disable apparmor
    docker run --rm --pid=host -it --privileged ubuntu:xenial \
      nsenter -t 1 -m -u -i -n /bin/bash -c \
      "service apparmor stop &&
       service apparmor teardown &&
       update-rc.d -f apparmor remove &&
       apt-get remove -y apparmor"

    # Start port forwarder
    build/portforward.sh start

restore_image_cache: &restore_image_cache
  name: Restore image cache
  keys:
  - tst-images-v2-{{ checksum "images/Dockerfile.build-base" }}-{{ checksum "images/Dockerfile.virtlet-base" }}

restore_vendor_cache: &restore_vendor_cache
  name: Restore vendor cache
  keys:
  - tst-vendor-v2-{{ checksum "glide.yaml" }}-{{ checksum "glide.lock" }}

restore_images_and_vendor: &restore_images_and_vendor
  name: Prepare build image & vendor dir
  command: |
    if [[ -f _output/images.tar ]]; then
      docker load -i _output/images.tar
    fi
    if [[ -f _output/vendor.tar ]]; then
      build/portforward.sh 18730&
      build/cmd.sh start-build-container
      docker exec -i virtlet-build tar -C /go/src/github.com/Mirantis/virtlet -xv <_output/vendor.tar
    fi


# - run:
#     name: Generate cache key file
#     command: |
#       tar -c images/Dockerfile.build-base images/Dockerfile.build-base glide.yaml glide.lock | sha1sum >cache.key

version: 2
jobs:
  prepare_build:
    <<: *defaults
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *setup_env
    - restore_cache:
        <<: *restore_image_cache
    - restore_cache:
        <<: *restore_vendor_cache
    - run:
        name: Prepare images and the vendor dir
        command: |
          if [[ ! -f _output/images.tar || ! -f _output/vendor.tar ]]; then
            build/cmd.sh prepare-vendor
          fi
    - run:
        name: Store base images
        command: |
          if [[ ! -f _output/images.tar ]]; then
            mkdir -p _output
            build_base_image="$(docker images -q -f label=virtlet.image=build-base --format '{{.Repository}}:{{.Tag}}')"
            virtlet_base_image="$(docker images -q -f label=virtlet.image=virtlet-base --format '{{.Repository}}:{{.Tag}}')"
            docker save "${build_base_image}" "${virtlet_base_image}" >_output/images.tar
          fi
    - save_cache:
        name: Save image cache
        key: tst-images-v2-{{ checksum "images/Dockerfile.build-base" }}-{{ checksum "images/Dockerfile.virtlet-base" }}
        paths:
        - _output/images.tar
    - run:
        name: Store vendor archive
        command: |
          if [[ ! -f _output/vendor.tar ]]; then
            mkdir -p _output
            docker exec virtlet-build tar -C /go/src/github.com/Mirantis/virtlet -c vendor >_output/vendor.tar
          fi
    - save_cache:
        name: Save vendor cache
        key: tst-vendor-v2-{{ checksum "glide.yaml" }}-{{ checksum "glide.lock" }}
        paths:
        - _output/vendor.tar

  build:
    <<: *defaults
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *setup_env
    - restore_cache:
        <<: *restore_image_cache
    - restore_cache:
        <<: *restore_vendor_cache
    - run:
        <<: *restore_images_and_vendor

    - run:
        name: Build virtlet
        command: |
          build/portforward.sh 18730&
          build/cmd.sh build
          build/cmd.sh copy
    - run:
        name: Save image
        command: |
          docker save mirantis/virtlet >_output/virtlet.tar
    - persist_to_workspace:
        root: _output
        paths:
        - virtlet.tar
        - virtlet-e2e-tests
        # needed by integration tests
        - vmwrapper

  test:
    <<: *defaults
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *setup_env
    - restore_cache:
        <<: *restore_image_cache
    - restore_cache:
        <<: *restore_vendor_cache
    - run:
        <<: *restore_images_and_vendor
    - run:
        name: Run tests
        command: |
          build/portforward.sh 18730&
          build/cmd.sh test

  e2e:
    <<: *defaults
    steps:
    - checkout
    - setup_remote_docker
    - run:
        <<: *setup_env
    - attach_workspace:
        at: _output
    - run:
        name: Restore virtlet image
        command: |
          docker load -i _output/virtlet.tar
    - run:
        name: Start the demo
        command: |
          build/portforward.sh 8080&
          VIRTLET_DEMO_RELEASE=master \
            SKIP_SNAPSHOT=1 \
            NONINTERACTIVE=1 \
            NO_VM_CONSOLE=1 \
            INJECT_LOCAL_IMAGE=1 \
            VIRTLET_DEMO_RELEASE=master \
            BASE_LOCATION="$PWD" \
            deploy/demo.sh
    - run:
        name: Run e2e tests
        command: |
          build/portforward.sh 8080&
          _output/virtlet-e2e-tests -test.v

workflows:
  version: 2
  build-and-test:
    jobs:
    - prepare_build
    - build:
        requires:
        - prepare_build
    - test:
        requires:
        - prepare_build
    - e2e:
        requires:
        - build

# TODO: add a job that just ensures the cache for the base images
# (does just build/cmd.sh ensure-build-image)
# TODO: make it possible to run e2e from within the build container, too
# (although we don't need to use that for CircleCI)
# TODO: separate job for integration/unit tests
# TODO: reindent cmd.sh
